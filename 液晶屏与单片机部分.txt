#include <reg52.H> 
#include <intrins.h> 
//定义液晶屏接口（除电源接口外共有九个接口）
sbit lcd_sclk=P2^3; 
sbit lcd_sid=P2^2; 
sbit lcd_rs=P2^1; 
sbit lcd_reset=P1^0; 
sbit lcd_cs1=P1^1; 
sbit Rom_IN=P1^3;
sbit Rom_OUT=P1^2; 
sbit Rom_SCK=P1^4; 
sbit Rom_CS=P1^5; 
//定义一个蜂鸣器
sbit Beep=P2^0; 
//定义四个按键开关
sbit key1=P2^4;
sbit key2=P2^5;
sbit key3=P2^6;
sbit key4=P2^7;
#define uchar unsigned char 
#define uint unsigned int 
#define ulong unsigned long 

//写指令到LCD模块
void transfer_command_lcd(int data1) 
{ 
 char i; 
 lcd_rs=0; 
 for(i=0;i<8;i++) 
 { 
 lcd_sclk=0; 
 if(data1&0x80) lcd_sid=1; 
 else lcd_sid=0; 
 lcd_sclk=1; 
 data1=data1<<=1; 
 }} 

// 写数据到LCD模块
void transfer_data_lcd(int data1) 
{ 
 char i; 
 lcd_rs=1; 
 for(i=0;i<8;i++) 
 { 
 lcd_sclk=0; 
 if(data1&0x80) lcd_sid=1;
else lcd_sid=0; 
 lcd_sclk=1; 
 data1=data1<<=1; 
 }} 

// 定义一个延时函数
void delay(unsigned int count)
{
	int i;
	for(i=1;i<=count;i++);
}

//LCD模块初始化
void initial_lcd() 
{ 
 lcd_cs1=0; 
 Rom_CS = 1; 
 lcd_reset=0; 
 delay(20); 
 lcd_reset=1; 
 delay(20); 
 transfer_command_lcd(0xe2); 
 delay(5); 
 transfer_command_lcd(0x2c); 
 delay(5); 
 transfer_command_lcd(0x2e); 
 delay(5); 
 transfer_command_lcd(0x2f); 
 delay(5); 
 transfer_command_lcd(0x23); 
 transfer_command_lcd(0x81); 
transfer_command_lcd(0x1f); 
 transfer_command_lcd(0xa2); 
 transfer_command_lcd(0xc8);
 transfer_command_lcd(0xa0);
 transfer_command_lcd(0x40); 
 transfer_command_lcd(0xaf); 
 lcd_cs1=1; 
} 


void lcd_address(uint page,uint column) 
{ 
 column=column-0x01; 
 transfer_command_lcd(0xb0+page-1);//	设置页地址
 transfer_command_lcd(0x10+(column>>4&0x0f));//	设置列地址高四位
 transfer_command_lcd(column&0x0f); //	设置列地址第四位
} 

//定义“全屏清屏”
void clear_screen() 
{ 
 unsigned char i,j; 
 lcd_cs1=0; 
 Rom_CS = 1; 
 for(i=0;i<9;i++) 
 { 
 transfer_command_lcd(0xb0+i); 
 transfer_command_lcd(0x10); 
 transfer_command_lcd(0x00); 
 for(j=0;j<132;j++) 
 { 
 transfer_data_lcd(0x00); 
 } 
 } 
 lcd_cs1=1; 
} 

//显示图像，汉字，自造字符
void display_128x64(uchar *dp) 
{ 
 uint i,j; 
 lcd_cs1=0; 
 for(j=0;j<8;j++) 
 { 
 lcd_address(j+1,1); 
 for (i=0;i<128;i++)
{ 
 transfer_data_lcd(*dp); 
 dp++; 
 } 
 } 
 lcd_cs1=1; 
} 

void display_graphic_16x16(uint page,uint column,uchar *dp) 
{ 
 uint i,j; 
 lcd_cs1=0; 
 Rom_CS = 1; 
 for(j=0;j<2;j++) 
 { 
 lcd_address(page+j,column); 
 for (i=0;i<16;i++) 
 { 
 transfer_data_lcd(*dp); 
 dp++; 
 } 
 } 
 lcd_cs1=1; 
} 

void display_graphic_8x16(uint page,uchar column,uchar *dp) 
{ 
 uint i,j; 
 lcd_cs1=0; 
 for(j=0;j<2;j++) 
 { 
 lcd_address(page+j,column); 
 for (i=0;i<8;i++) 
 { 
 transfer_data_lcd(*dp); 
 dp++; 
 } 
 } 
 lcd_cs1=1; 
}

void display_graphic_5x7(uint page,uchar column,uchar *dp) 
{ 
 uint col_cnt; 
 uchar page_address; 
 uchar column_address_L,column_address_H; 
 page_address = 0xb0+page-1; 
 
 lcd_cs1=0; 
 
 column_address_L =(column&0x0f)-1; 
 column_address_H =((column>>4)&0x0f)+0x10; 
 
 transfer_command_lcd(page_address); 
 transfer_command_lcd(column_address_H); 
 transfer_command_lcd(column_address_L); 
 
 for (col_cnt=0;col_cnt<6;col_cnt++) 
 { 
 transfer_data_lcd(*dp); 
 dp++; 
 } 
 lcd_cs1=1; 
} 

//发送指令给字库IC
void send_command_to_ROM( uchar datu ) 
{ 
 uchar i; 
 for(i=0;i<8;i++ ) 
 { 
 if(datu&0x80) 
 Rom_IN = 1; 
 else 
 Rom_IN = 0; 
 datu = datu<<1; 
 Rom_SCK=0; 
 Rom_SCK=1; 
 } 
} 

//从晶联讯字库 IC 中取汉字或字符数据（1 个字节）
static uchar get_data_from_ROM( ) 
{ 
 
 uchar i;
	 uchar ret_data=0; 
 Rom_SCK=1; 
 for(i=0;i<8;i++) 
 { 
 Rom_OUT=1; 
 Rom_SCK=0; 
 ret_data=ret_data<<1; 
 if( Rom_OUT ) 
 ret_data=ret_data+1; 
 else 
 ret_data=ret_data+0; 
 Rom_SCK=1; 
 } 
 return(ret_data); 
} 

void get_n_bytes_data_from_ROM(uchar addrHigh,uchar addrMid,uchar addrLow,uchar *pBuff,uchar DataLen ) 
{ 
 uchar i; 
 Rom_CS = 0; 
 lcd_cs1=1; 
 Rom_SCK=0; 
 send_command_to_ROM(0x03); 
 send_command_to_ROM(addrHigh); 
 send_command_to_ROM(addrMid); 
 send_command_to_ROM(addrLow); 
 for(i = 0; i < DataLen; i++ ) 
 *(pBuff+i) =get_data_from_ROM(); 
 Rom_CS = 1; 
}
	ulong fontaddr=0; 
void display_GB2312_string(uchar y,uchar x,uchar *text) 
{ 
 uchar i= 0; 
 uchar addrHigh,addrMid,addrLow ; 
 uchar fontbuf[32]; 
 while((text[i]>0x00))
	 { 
 if(((text[i]>=0xb0) &&(text[i]<=0xf7))&&(text[i+1]>=0xa1)) 
 { 
 fontaddr = (text[i]- 0xb0)*94; 
 fontaddr += (text[i+1]-0xa1)+846; 
 fontaddr = (ulong)(fontaddr*32); 
 addrHigh = (fontaddr&0xff0000)>>16;
 addrMid = (fontaddr&0xff00)>>8; 
 addrLow = fontaddr&0xff; 
 get_n_bytes_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,32 );
 display_graphic_16x16(y,x,fontbuf);
 i+=2; 
 x+=16; 
 } 
 else if((text[i]>=0x20) &&(text[i]<=0x7e)) 
 { 
 unsigned char fontbuf[16]; 
 fontaddr = (text[i]- 0x20); 
 fontaddr = (unsigned long)(fontaddr*16); 
 fontaddr = (unsigned long)(fontaddr+0x3cf80); 
 addrHigh = (fontaddr&0xff0000)>>16; 
 addrMid = (fontaddr&0xff00)>>8; 
 addrLow = fontaddr&0xff; 
 get_n_bytes_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,16 );
 display_graphic_8x16(y,x,fontbuf);
 i+=1; 
 x+=8; 
 } 
 else 
 i++; 
 } 
 
} 
void display_string_5x7(uchar y,uchar x,uchar *text) 
{ 
 unsigned char i= 0; 
 unsigned char addrHigh,addrMid,addrLow ; 
 while((text[i]>0x00)) 
 {
	if((text[i]>=0x20) &&(text[i]<=0x7e)) 
 { 
 unsigned char fontbuf[8]; 
 fontaddr = (text[i]- 0x20); 
 fontaddr = (unsigned long)(fontaddr*8); 
 fontaddr = (unsigned long)(fontaddr+0x3bfc0); 
 addrHigh = (fontaddr&0xff0000)>>16; 
 addrMid = (fontaddr&0xff00)>>8; 
 addrLow = fontaddr&0xff; 
 get_n_bytes_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,8);
 display_graphic_5x7(y,x,fontbuf);
 i+=1; 
 x+=6; 
 } 
 else 
 i++; 
 } 
 
} 

//主函数
void main(void) 
{
 Rom_CS=1; 
 lcd_cs1=0; 
 initial_lcd(); 
 clear_screen(); 
if(key1==1,key2==1,key3==1,key4==1)
 {
	 Beep=0;
	 delay(8000);
	 Beep=1;
	 delay(8000);Beep=0;
	 delay(8000);
	 Beep=1;
	 delay(8000);Beep=0;
	 delay(8000);
	 Beep=1;
	 delay(8000);
	 display_GB2312_string(1,1,"欢迎使用求助机");
while(key1==1&&key2==1&&key3==1&&key4==1);
}
 
 while(1)
	 {
if(key1==0)
 { clear_screen();
	 Beep=0;
	 delay(20000);
	 Beep=1;
	 delay(20000);
	 
 display_GB2312_string(1,1,"我生病了"); 
while(key1==0&&key2==1&&key3==1&&key4==1);
while(key1==1&&key2==1&&key3==1&&key4==1);}
 
if(key2==0)
{  clear_screen(); 
	 Beep=0;
	 delay(20000);
	 Beep=1;
	 delay(20000);
 display_GB2312_string(1,1,"失火了");
while(key1==1&&key2==0&&key3==1&&key4==1);
while(key1==1&&key2==1&&key3==1&&key4==1);}

 if(key3==0)
 { clear_screen(); 
	 Beep=0;
	 delay(20000);
	 Beep=1;
	 delay(20000);
 display_GB2312_string(1,1,"电路故障");
while(key1==1&&key2==1&&key3==0&&key4==1);
while(key1==1&&key2==1&&key3==1&&key4==1);}

 if(key4==0)
 { clear_screen(); 
	 Beep=0;
	 delay(20000);
	 Beep=1;
	 delay(20000);
 display_GB2312_string(1,1,"其他求助");
while(key1==1&&key2==1&&key3==1&&key4==0);
while(key1==1&&key2==1&&key3==1&&key4==1);}
 }}

 
	
